pipeline {
    agent any

    environment {
        AWS_REGION = "ap-south-1"
        CLUSTER_NAME = "eks-test-cluster"
        ECR_REPO = "544281168843.dkr.ecr.ap-south-1.amazonaws.com/k8s-test-repo"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        K8S_MANIFEST = "nginx-deployment.yaml"
    }

    stages {

        stage('Login to ECR') {
            steps {
                sh '''
                aws ecr get-login-password --region $AWS_REGION | \
                docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                sh '''
                docker build -t $ECR_REPO:$IMAGE_TAG .
                docker push $ECR_REPO:$IMAGE_TAG
                '''
            }
        }

        stage('Update Kubernetes Manifest') {
            steps {
                sh '''
                sed -i "s|IMAGE_PLACEHOLDER|$ECR_REPO:$IMAGE_TAG|g" $K8S_MANIFEST
                '''
            }
        }
        stage('Deploy to Kubernetes') {
    steps {
        withCredentials([usernamePassword(
            credentialsId: 'aws-eks-creds',
            usernameVariable: 'AWS_ACCESS_KEY_ID',
            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
            sh '''
            # Configure AWS CLI
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_REGION

            # Update kubeconfig and deploy
            aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
            kubectl apply -f $K8S_MANIFEST
            '''
        }
    }
}

       
    }

    post {
        success {
            echo "✅ Deployment successful!"
        }
        failure {
            echo "❌ Deployment failed."
        }
    }
}

